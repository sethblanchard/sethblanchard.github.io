{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/template/project-template.js"],"names":["children","id","className","style","color","to","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","story","pageContext","url","url_title","short_title","description","role","media_classes","awards","media","target","rel","href","map","txt","data-icon","viewBox","d","asset","type","classes","muted","autoplay","loop","playsinline","poster","sources","src","caption","alt"],"mappings":"2FAAA,yDAKe,oBAAGA,EAAH,EAAGA,SAAH,OACb,yBAAKC,GAAG,QACN,wBAAIC,UAAU,yCAAyC,kBAAC,IAAD,CAAMC,MAAO,CAACC,MAAM,WAAYC,GAAG,KAAnC,mBACtDL,K,kCCRL,sGAcyBM,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,kCCPX,wDAIe,sBAAgC,IAAdC,EAAa,EAA5BC,YAAeD,MACtBE,EAOEF,EAPFE,IACRC,EAMUH,EANVG,UACAC,EAKUJ,EALVI,YACAC,EAIUL,EAJVK,YACAC,EAGUN,EAHVM,KACAC,EAEUP,EAFVO,cACAC,EACUR,EADVQ,OACAC,EAAUT,EAAVS,MACK3B,EAAQ,CACV,aAAgB,cAEpB,OACE,kBAAC,IAAD,KACA,6BAASD,UAAU,UACjB,yBAAKA,UAAU,mBACf,0BAAMA,UAAU,uCAAhB,KACA,wBAAIA,UAAU,+BAA+BC,MAAOA,GAAQsB,GAC5D,0BAAMvB,UAAU,uCAAhB,KACE,wBAAIA,UAAU,yBAAd,oBACA,uBAAGA,UAAU,8BAA8B6B,OAAO,SAASC,IAAI,sBAAsB7B,MAAOA,EAAO8B,KAAMV,GAAMC,GAC9GE,EAAYQ,KAAI,SAAAC,GAAG,OAAI,uBAAGjC,UAAU,6BAA6BiC,MAClE,wBAAIjC,UAAU,0BAAd,QACA,uBAAGA,UAAU,8BACVyB,GAEFE,GACA,kBAAC,WAAD,KAAU,wBAAI3B,UAAU,yBAAd,sBACX,uBAAGA,UAAU,8BAA8B2B,IAE3C,kBAAC,IAAD,CACExB,GAAG,IACHH,UAAU,kIACV,yBAAKA,UAAU,KAAKkC,YAAU,cAAcC,QAAQ,YAAYlC,MAAO,CAAC,KAAO,iBAC7E,mDACA,0BAAMmC,EAAE,8CAEV,0BAAMpC,UAAU,OAAhB,UAGJ,yBAAKA,UAAU,mCAEX,0BAAMA,UAAU,uCAAhB,KACA,wBAAIA,UAAU,4BAA4BC,MAAOA,GAAQsB,GACzD,0BAAMvB,UAAU,uCAAhB,KACA,yBAAKA,UAAW0B,GAAiB,IAC9BE,GAASA,EAAMI,KAAI,SAAAK,GAClB,OAAGA,EAAMC,MAAuB,UAAfD,EAAMC,KAEd,yBAAKtC,UAAS,mBAAqBqC,EAAME,SAC9C,2BAAOC,MAAM,QAAQC,SAAS,WAAWC,KAAK,OAAOC,YAAY,OAAOC,OAAQP,EAAMO,QACnFP,EAAMQ,QAAQb,KAAI,SAAAc,GAAG,OAAI,4BAAQA,IAAKA,EAAIA,IAAKR,KAAMQ,EAAIR,WAE3DD,EAAMU,SAAW,uBAAG/C,UAAU,uBAAuBqC,EAAMU,UAIxD,yBAAK/C,UAAS,oBAAsBqC,EAAME,SAC5C,yBAAKO,IAAKT,EAAMS,IAAKE,IAAKX,EAAMW,MACjCX,EAAMU,SAAW,uBAAG/C,UAAU,uBAAuBqC,EAAMU","file":"component---src-template-project-template-js-6526817869a0884fdb79.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./Tachyons.4.11.2.css\"\nimport \"./layout.css\"\n\nexport default ({ children }) => (\n  <div id=\"root\">\n    <h1 className=\"f-headline-ns f-4 lh-solid sans-serif\" ><Link style={{color:\"#8eb4c6\"}} to=\"/\">Seth Blanchard</Link></h1>\n    {children}\n  </div>\n)","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { Fragment } from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default ({ pageContext: { story }}) => {\n   const { url,\n   url_title,\n   short_title,\n   description,\n   role,\n   media_classes,\n   awards,\n   media } = story;\n    let style = {\n      \"borderBottom\": \"1px dotted\"\n    }\n  return (\n    <Layout>\n    <section className=\"flex-l\">\n      <div className=\"w-30-l w-100 db\">\n      <span className=\"dib dn-l mt0 mb3 pt2 pb2 ml2 mr2 f3\">◇</span>\n      <h3 className=\"dn-l di serif f2 di mt0 mb3 \" style={style}>{short_title}</h3>\n      <span className=\"dib dn-l mt0 mb3 pt2 pb2 ml2 mr2 f3\">◇</span>\n        <h5 className=\"sans-serif f5 mt0 mb1\">Project Overview</h5>\n        <a className=\"normal dib no-underline mb1\" target=\"_blank\" rel=\"noopener noreferrer\" style={style} href={url}>{url_title}</a>\n        {description.map(txt => <p className=\"mt2 sans-serif f5 lh-copy\">{txt}</p> )}\n        <h5 className=\"sans-serif f5 mt3  mb1\">Role</h5>\n        <p className=\"mt0  sans-serif f5 lh-copy\">\n          {role}\n        </p>\n        {awards &&\n        (<Fragment><h5 className=\"sans-serif f5 mt0 mb1\">Awards/Nominations</h5>\n        <p className=\"mt0  sans-serif f5 lh-copy\">{awards}</p>\n        </Fragment>)}\n        <Link \n          to=\"/\"\n          className=\" op--2 mt2 f5 primary bg-dark bg-animate bg-primary-hover dark-hover inline-flex items-center pa2 ba b--primary border-box br2\">\n          <svg className=\"w1\" data-icon=\"chevronLeft\" viewBox=\"0 0 32 32\" style={{\"fill\":\"currentcolor\"}}>\n            <title>chevronLeft icon</title>\n            <path d=\"M20 1 L24 5 L14 16 L24 27 L20 31 L6 16 z\"></path>\n          </svg>\n          <span className=\"pl1\">Back</span>\n        </Link>\n      </div>\n      <div className=\"w-70-l w-100 db pl5-l mt0-l mt4\">\n\n          <span className=\"dn dib-l mt0 mb3 pt2 pb2 ml2 mr2 f3\">◇</span>\n          <h3 className=\"di-l dn serif f2 mt0 mb3 \" style={style}>{short_title}</h3>\n          <span className=\"dn dib-l mt0 mb3 pt2 pb2 ml2 mr2 f3\">◇</span>\n          <div className={media_classes || \"\"}>\n            {media && media.map(asset => {\n              if(asset.type && asset.type === \"video\")\n              {\n                return(<div className={`project-img mb2 ${asset.classes}`}>\n                  <video muted=\"muted\" autoplay=\"autoplay\" loop=\"true\" playsinline=\"true\" poster={asset.poster}>\n                    {asset.sources.map(src => <source src={src.src} type={src.type} />)}\n                  </video>\n                  {asset.caption && <p className=\"mt1 o-80 i serif f6\">{asset.caption}</p>}\n                </div>)\n\n              }\n              return (<div className={`project-img  mb2 ${asset.classes}`}>\n                    <img src={asset.src} alt={asset.alt} />\n                  {asset.caption && <p className=\"mt1 o-80 i serif f6\">{asset.caption}</p>}\n                </div>\n                )\n            })}\n          </div>\n      </div>\n    </section>\n    </Layout>\n  )\n}"],"sourceRoot":""}